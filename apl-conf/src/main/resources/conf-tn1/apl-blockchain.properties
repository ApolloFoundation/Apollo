################################################################################
# Copyright (\u00d1\u0081) 2013-2016 The Nxt Core Developers.                               #
# Copyright (\u00d1\u0081) 2016-2017 Jelurida IP B.V.                                       #
#                                                                              #
# See the LICENSE.txt file at the top-level directory of this distribution     #
# for licensing information.                                                   #
#                                                                              #
# Unless otherwise agreed in a custom licensing agreement with Jelurida B.V.,  #
# no part of the Nxt software, including this file, may be copied, modified,   #
# propagated, or distributed except according to the terms contained in the    #
# LICENSE.txt file.                                                            #
#                                                                              #
# Removal or modification of this copyright notice is prohibited.              #
#                                                                              #
################################################################################

################################################################################
# Copyright (\u00d1\u0081) 2017-2019 Apollo Foundation                                      #
################################################################################

#### SYSTEM ####

# Set the socks proxy host.
#socksProxyHost=localhost

# Set the socks proxy port.
#socksProxyPort=9050



#### PEER NETWORKING ####

# Announce my IP address/hostname to peers and allow them to share it with other
# peers. If disabled, peer networking servlet will not be started at all.
apl.shareMyAddress=true

# Port for incoming peer to peer networking requests, if peer server enabled.
apl.myPeerServerPort=47874
# Port for incoming peer to peer networking TLS requests, if peer server enabled.
apl.myPeerServerPortTLS=47843
#use TLS for peer ro peer
apl.peerUseTLS=false
# Port for outcoming peer to peer networking requests, if peer server enabled.
# By default this port equals to apl.myPeerServerPort and should not be changed
apl.networkPeerServerPort=47874

# Enable UPnP for the peer port.
apl.enablePeerUPnP=true

# UPnP gateway http read timeout, milliseconds. Set to -1 to disable.
# Default 7000 if not set.
#apl.upnpGatewayTimeout=7000

# UPnP gateway socket connection timeout, milliseconds. Set to -1 to disable.
# Default 3000 if not set.
#apl.upnpDiscoverTimeout=3000

# Host interface on which to listen for peer networking requests, default all.
# Use 0.0.0.0 to listen on all interfaces, including IPv6.
apl.peerServerHost=0.0.0.0

# My externally visible IP address or host name, to be announced to peers.
# It can optionally include a port number, which will also be announced to
# peers, and may be different from apl.peerServerPort (useful if you do port
# forwarding behind a router).
apl.myAddress=

# My platform, to be announced to peers.
apl.myPlatform=

# My hallmark, if available.
apl.myHallmark=
# Deprecated use chains.json to configure default peers
# Default initial peers. Only used if apl.usePeersDb=true.
# Do not modify. Add custom peers to apl.wellKnownPeers instead.
#apl.defaultPeers=93.175.202.255;18.217.154.227;52.14.216.254;18.217.179.108;18.221.239.249;52.14.216.254;13.57.45.166;34.237.231.77;34.227.255.90;52.14.238.150;18.218.76.3;52.1.49.185;52.14.39.169

# Deprecated, use chains.json to configure wellKnown peers
# A list of well known peer addresses / host names, separated by '; '. These
# peers are always kept in connected state.
#apl.wellKnownPeers=34.237.231.77

# Deprecated, use chains.json to configure blacklisted peers
# Known bad peers to be blacklisted.
#apl.knownBlacklistedPeers=

# Deprecated, use chains.json to configure default testnet peers
# Default initial peers used for testnet only. Only used if apl.usePeersDb=true.
# Do not modify. Add custom testnet peers to apl.testnetPeers instead.
#apl.defaultTestnetPeers=51.15.235.41;163.172.146.173;51.15.69.39;51.15.59.37;51.15.114.68

# Deprecated, use chains.json to configure testnet peers
# Well known testnet peers.
#apl.testnetPeers=

# Maximum number of inbound connections.
apl.maxNumberOfInboundConnections=2500

# Maximum number of outbound connections.
apl.maxNumberOfOutboundConnections=500

# Maintain active connections with at least that many peers.
apl.maxNumberOfConnectedPublicPeers=200

# Stop adding new peers when number of known peers exceeds that many.
apl.maxNumberOfKnownPeers=2000

# Stop removing old peers when number of known peers drops below that many.
apl.minNumberOfKnownPeers=1000

# Peer networking connect timeout for outgoing connections.
apl.connectTimeout=10000

# Peer networking read timeout for outgoing connections.
apl.readTimeout=20000

# Peer networking server idle timeout, milliseconds.
apl.peerServerIdleTimeout=30000

# Use WebSocket connection if supported by the remote peer.
apl.useWebSockets=true

# WebSocket connection idle timeout (milliseconds).
apl.webSocketIdleTimeout=300000

# Use the peer hallmark to only connect with peers above the defined push/pull
# hallmark thresholds.
# Disabling hallmark protection also disables weighting of peers by hallmark
# weight, so connecting to any of your peers becomes equally likely.
apl.enableHallmarkProtection=true

# Hallmark threshold to use when sending data to peers.
apl.pushThreshold=0

# Hallmark threshold to use when requesting data from peers.
apl.pullThreshold=0

# Blacklist peers for 600000 milliseconds (i.e. 10 minutes by default).
apl.blacklistingPeriod=600000

# Consider a new transaction or block sent after 10 peers have received it.
apl.sendToPeersLimit=10

# Enable the Jetty Denial of Service Filter for the peer networking server.
apl.enablePeerServerDoSFilter=true

# Compress Http responses for the peer networking server.
apl.enablePeerServerGZIPFilter=true

# Deprecated, use chains.json to switch between blockchains
# Use testnet, leave set to false unless you are really testing.
# Never unlock your real accounts on testnet! Use separate accounts for testing
# only.
# When using testnet, all custom port settings will be ignored,
# and hardcoded ports of 6874 (peer networking), 6875 (UI) and 6876 (API) will
# be used.
#apl.isTestnet=false

# Save known peers in the database
apl.savePeers=true

# Set to false to disable use of the peers database and the default initial
# peers. This will not delete saved peers.
apl.usePeersDb=true

# Set to false to disable getting more peers from the currently connected peers.
# Only useful when debugging and want to limit the peers to those in peersDb or
# wellKnownPeers.
apl.getMorePeers=true

# Set to true to run offline - do not connect to peers and do not listen for
# incoming peer connections. This is equivalent to setting
# apl.shareMyAddress=false, apl.wellKnownPeers=, apl.testnetPeers= 
# and apl.usePeersDb=false, and if set to true overrides those properties.
apl.isOffline=false

# Ignore peer announced addresses. Do not change unless you understand what it
# does.
apl.ignorePeerAnnouncedAddress=false

# Only allow peer addresses starting with "fc". This is for users of cjdns only,
# do not set if you don't know what that is.
apl.cjdnsOnly=false

# Do not include exception details when returning error response to peers.
apl.hideErrorDetails=false



#### API SERVER ####

# Accept http/json API requests.
apl.enableAPIServer=true

# Hosts from which to allow http/json API requests, if enabled. Set to * to
# allow all. Can also specify networks in CIDR notation, e.g. 192.168.1.0/24.
apl.allowedBotHosts=*;

# Port for http/json API requests.
apl.apiServerPort=7876

# Port for https/json API request. If same as apl.apiServerPort, the apl.apiSSL
# setting determines whether SSL is used or not.
apl.apiServerSSLPort=7876

# Enable UPnP for the API ports.
apl.enableAPIUPnP=false

# Host interface on which to listen for http/json API request, default localhost
# only. Set to 0.0.0.0 to allow the API server to accept requests from all
# network interfaces, including IPv6.
apl.apiServerHost=127.0.0.1

# Idle timeout for http/json API request connections, milliseconds.
apl.apiServerIdleTimeout=30000

# Directory with html and javascript files for the new client UI, and admin
# tools utilizing the http/json API.
apl.apiResourceBase=./html/www

# Default page for the API server.
apl.apiWelcomeFile=index.html

# Java API documentation directory, optional.
apl.javadocResourceBase=./html/doc

# Enable Cross Origin Filter for the API server.
apl.apiServerCORS=true

# Add X-Frame-Options SAMEORIGIN header to every response as a protection
# against clickjacking.
apl.apiFrameOptionsSameOrigin=true

# Enable SSL for the API server (also need to set apl.keyStorePath and
# apl.keyStorePassword).
# Non-SSL connections will be disabled if apl.apiServerSSLPort is equal to
# apl.apiServerPort.
# Otherwise, both SSL and non-SSL connections will be accepted.
apl.apiSSL=false

# Enabled cipher suites for the API server when SSL is enabled. The list below
# is an example to use for choosing AES-GCM instead of AES-CBC, not the default.
#apl.apiSSLCiphers=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384; \
#  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256; \
#  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384; \
#  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;

# Enforce requests that require POST to only be accepted when submitted as POST.
apl.apiServerEnforcePOST=true

# Compress Http responses for the API server. If not set, enabled for openAPI
# nodes only.
#apl.enableAPIServerGZIPFilter=false

# Password that should be provided when executing protected (administrative) API
# requests.
# Please choose a decent password here. Preferably, use a password generator.
# Password protection is disabled and password is not needed when the API server
# only listens on the localhost interface, i.e. when 
# apl.apiServerHost=127.0.0.1.
apl.adminPassword=

# Set to true to disable the password protection for admin API requests even
# when API server is publicly accessible. Not recommended.
apl.disableAdminPassword=false

# The maximum number of records possible to retrieve with a single request. This
# restriction is not enforced if the admin password is provided, or is not
# needed (disabled or listening on localhost only).
apl.maxAPIRecords=100

# API event registration timeout (seconds). The timeout is reset each time an
# event wait request is received from the application. The minimum value is 15
# seconds.
apl.apiEventTimeout=300

# Maximum number of applications with active event registrations.
apl.apiMaxEventUsers=32

# Maximum file size accepted for upload, in bytes. Default and minimum value
# accepted is 43008 (42 kbytes).
#apl.maxUploadFileSize=0

#Maximum key store file size accepted for upload, in bytes.
apl.maxKeyStoreFileSize=2000

# If an unsigned transaction is submitted with insufficient fee, set the fee to
# the minimum fee calculated for this transaction instead, as if feeATM=0 has
# been specified. Default is false.
apl.correctInvalidFees=false

# APIs to disable, as a semicolon separated list.
apl.disabledAPIs=

# Groups of APIs to disable, as a semicolon separated list of API tag names.
apl.disabledAPITags=

# Enables the API proxy. Requests are forwarded to a randomly chosen peer
# providing openAPI service. Outgoing transactions are signed locally - the
# secret phrase is never sent to the remote peer.
# Used by light clients or when the blockchain is not yet downloaded.
# For openAPI nodes, the API proxy remains disabled, ignoring this setting.
# For light clients, the API proxy is always enabled, ignoring this setting.
apl.enableAPIProxy=true

# Operate as light client. Blockchain is not downloaded and processed, instead
# the API proxy is used (see apl.enableAPIProxy).
# Light clients are not advertised as providing openAPI service even if they do
# have their API publicly accessible.
apl.isLightClient=false

# If set, all requests will be forwarded to the specified openAPI peer
apl.forceAPIProxyServerURL=

# The period remote API servers are blacklisted when not functioning (in
# milliseconds).
# The API proxy blacklisting mechanism is in addition to the peers blacklisting
# - if a peer is blacklisted, it won't be used by the proxy, but it is possible
# that a peer is online and correctly functioning, and only its open API is
# blocked (e.g. by firewall)
apl.apiProxyBlacklistingPeriod=1800000

# When the API server is running behind a proxy, use this header to obtain the
# remote host for which the API request was forwarded. Currently only used for
# keeping track of and blacklisting hosts that try to brute force the API admin
# password.
#apl.forwardedForHeader=X-Forwarded-For

#### Ethereum  ####

#Url of eth node for Web3j.
apl.eth.node.url=https://ropsten.infura.io/v3/fd015ebfa03c41c1a3d4a24734da99b4

#apl.eth.node.port=

apl.eth.pax.contract.address=0xd4aecf650c2c9a0d4e2bf08fd10268ca1e199fcd

# Contract which provide functionality of atomic swap.
apl.eth.swap.contract.address=0x73B7A08700BFB771f11F0E9E05aB43556Fa67Fa0


#### KEYSTORE ####
# Deprecated, keystore location now provided by dirProvider and can be changed by using environment variables, cmd args or
# using 'apl.customVaultKeystoreDir' property
# Directory which will be a keystore of private keys on mainnet and testnet
apl.keystoreDir=./keystore

# Deprecated, testnet and mainnet has the same configuration
# Directory which will be a keystore of private keys on testnet
apl.keystoreTestnetDir=./testnet_keystore

# Absolute path to custom keystore dir. Will override env vars and cmd args
#apl.customVaultKeystoreDir=

#### SECURESTORAGE ####
# Storage for keeping users keys to the dex.

apl.secureStorage.restore.isEnable=true

#### 2FA ####
#
# Enable 2fa data storing in file system
apl.store2FAInFileSystem=false

# DEPRECATED
# use cmd args instead
# Directory which wil be a storage for 2fa data on mainnet
apl.dir2FA=./keystore/2fa

# DEPRECATED
# testnet and mainnet 2fa dirs will be separated by using chainId but not testnet prefix
# Directory which wil be a storage for 2fa data on testnet
apl.testnetDir2FA=./testnet_keystore/2fa

# Suffix of 2fa issuer
apl.issuerSuffix2FA=


#### MIGRATION ####

# After successful migration db will be deleted depending on this option
apl.migrator.db.deleteAfterMigration=true

# After successful migration vault keystore will be deleted depending on this option
apl.migrator.vaultkeystore.deleteAfterMigration=true

# After successful migration 2fa data will be deleted depending on this option
apl.migrator.2fa.deleteAfterMigration=true

apl.migrator.db.migrate=true

apl.migrator.2fa.migrate=true

apl.migrator.vaultkeystore.migrate=true



#### DEBUGGING ####

# Log file, will be overwritten at every restart.
#apl.log=apl.log
# The log file is now specified in logging.properties.

# Enable debug log output.
#apl.debug=false
# Debug logging is now specified in logging properties.

# Include caller traceback in log messages.
apl.enableLogTraceback=false

# Enable sql logging (query + time ms)
apl.enableSqlLogs=false

# Enable logging of exception stack traces.
apl.enableStackTraces=true

# Enable logging of Jetty messages.
#apl.debugJetty=false
# Jetty logging is now specified in logging properties.

# Used for debugging peer to peer communications.
apl.communicationLoggingMask=0

# Track balances of the following accounts and related events for debugging
# purposes.
apl.debugTraceAccounts=

# File name for logging tracked account balances.
apl.debugTraceLog=apl-trace.csv

# Separator character for trace log.
apl.debugTraceSeparator=\t

# Quote character for trace log.
apl.debugTraceQuote="

# Log changes to unconfirmed balances.
apl.debugLogUnconfirmed=false



#### DATABASE ####

# Database connection JDBC url, see the H2 documentation for possible
# customizations.
# Append ;AUTO_SERVER=TRUE to enable automatic mixed mode access.
# By default the apl_db folder is expected to be in the directory provided by DirProvider for
# specified application mode (possible Service mode and User mode). By default
# application is running in User mode and db will be located at
# /home/user/.apl-blockchain/apl-blochain-db/chainId(shortened form)/
# This directory will be  created if missing.
#
# apl.dbUrl=jdbc:h2:./apl_db/apl;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

# Database connection JDBC url to use with the test network, if isTestnet=true.
# apl.testDbUrl=jdbc:h2:./apl_test_db/apl;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

apl.dbType=h2
# Deprecated, db type for any chain specified by apl.dbType
#apl.testDbType=h2

# Deprecated, Only used for migration
# db dir now specified by dir provider and can be overridden by environment variables, cmd args or by using apl.customDbDir
# property
apl.dbDir=./apl_db
#Ucomment for using custom  db path. NOTE path is not absolute! It will be resolved using chainId and legacy home dir.#apl.customDbDir=./apl_db
apl.testDbDir=./apl_test_db

# Deprecated, only used for migration dbName specified by inner constants, and cannot be changed
apl.dbName=apl
apl.testDbName=apl

apl.dbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

# Deprecated,  testnet and mainnet dbs has the same configuration
apl.testDbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

apl.dbUsername=sa

# Deprecated, Used only for migration testnet and mainnet dbs has the same configuration
apl.testDbUsername=sa

apl.dbPassword=sa

# Deprecated, used only for migration
# testnet and mainnet dbs has the same configuration
apl.testDbPassword=sa

# Database connection timeout in seconds.
apl.dbLoginTimeout=70

# Database default lock timeout in seconds.
apl.dbDefaultLockTimeout=60

# Database max memory rows limit.
apl.dbMaxMemoryRows=1000000

# Maximum simultaneous database connections.
apl.maxDbConnections=100

# The memory allocated to database cache, in kB.
# If set to 0, the cache size varies from a minimum of 16MB for heap sizes 160MB
# or less, to a maximum of 256MB for heap sizes 640MB or higher.
apl.dbCacheKB=0

# Maintain enough previous height records to allow
# rollback of at least that many blocks. Cannot be set to less than 720.
# After increasing this value, a full re-scan also needs to be done in order for
# the previously trimmed records to be re-created and preserved.
apl.maxRollback=21000


# Override the lifetime of prunable data to keep them longer, value in seconds.
# Set to -1 to disable pruning. Has no effect if set to less then the minimum
# required lifetime of two weeks (1209600 seconds) on mainnet, or 24 hours
# (86400 seconds) on testnet. Default is 90 days.
apl.maxPrunableLifetime=7776000

# Include expired prunable parts if requested as long as it is still available.
# In order to provide the PRUNABLE peer service, apl.maxPrunableLifetime must
# be -1 and apl.includeExpiredPrunable must be true.  The PRUNABLE service means
# the peer will provide expired prunable data to other peers when requested.
apl.includeExpiredPrunable=true

# Threshold for logging database statements (milliseconds).
apl.statementLogThreshold=10000

# Threshold for logging database transactions (milliseconds).
apl.transactionLogThreshold=15000

# Threshold for trim operations (milliseconds).
apl.trimOperationsLogThreshold=1000

# Log the average transaction time after this many minutes.
apl.transactionLogInterval=15

# Public keys are by default cached, which consumes 10-15 MB of memory.
apl.enablePublicKeyCache=true

# When trimming or pruning derived tables, do a commit after that many records
# are processed. Default if not set is Integer.MAX_VALUE which prevents such
# intermediate commits.
apl.batchCommitSize=100


######################## SHARDING ########################

# Backup db to zip before making a shard db and delete old data from main db
apl.sharding.backupDb=true


#### Blocks and transactions ####

# Delay generation of next block in order to accumulate more transactions in it.
# Waiting for much more than 15 s is not useful as transactions are allowed at
# most 15 s timestamp difference from the block they can be included in.
apl.forgingDelay=20

# Generate and submit the next block before its hit time in response to
# receiving a lower difficulty block. Submitting the block more than 15 s before
# its time however will lead to its rejection.
apl.forgingSpeedup=3

# Maximum number of forging accounts allowed on this node.
apl.maxNumberOfForgers=100

# Verify batches of blocks downloaded from a single peer with that many other
# peers.
apl.numberOfForkConfirmations=0
apl.testnetNumberOfForkConfirmations=0

# Enable re-broadcasting of new transactions until they are received back from
# at least one peer, or found in the blockchain. This feature can optionally be
# disabled, to avoid the risk of revealing that this node is the submitter of
# such re-broadcasted new transactions.
apl.enableTransactionRebroadcasting=true

# Do not allow the number of unconfirmed transactions in memory to exceed this
# value. If exceeded, the same transaction ordering as when choosing which
# transactions to include in a forged block is used to decide which to keep in
# the unconfirmed pool.
# Set to 0 or negative for no limit.
apl.maxUnconfirmedTransactions=2000

# Maximum number of account monitors allowed on this node
apl.maxNumberOfMonitors=100



#### DESKTOP WALLET ####

# When using desktop mode and when user interface is available. Launch the
# wallet inside a desktop frame when the node is started.
apl.launchDesktopApplication=true

# The default account is used, to automatically login to the wallet during
# startup.
apl.defaultDesktopAccount=



#### ACCOUNT LEDGER ####

# Address of accounts (in RS format) to track balance changes in the ledger
# table, separated by ';'.
# Set to * to track changes for all accounts. Specify no accounts to disable
# the account ledger.
apl.ledgerAccounts=*

# Specify 0 to not log unconfirmed changes, 1 to log unconfirmed changes or 2 to
# log only unconfirmed changes.
apl.ledgerLogUnconfirmed=2

# Specify the number of blocks to keep when trimming the account ledger table.
# A value of zero will cause all blocks to be kept.
apl.ledgerTrimKeep=900000

#### MINT ####

# Address of the APL server to which the mint worker submits its transactions
# (default: localhost).
apl.mint.serverAddress=

# Use Https when connecting to the server. Note that mint worker accepts any SSL
# certificate as valid, without checking hostname or certificate authority,
# therefore this will not protect you against a man-in-the-middle attack when
# submitting mint transactions.
apl.mint.useHttps=false

# Specify a mintable currency code.
apl.mint.currencyCode=

# Secret phrase for the minting account, this secret phrase is sent to the host
# specified by apl.mint.serverAddress therefore do not specify secret phrase of
# an account with lots of funds.
apl.mint.secretPhrase=

# Number of units to mint per transaction.
# The minting difficulty grows linearly with the number of units per mint.
apl.mint.unitsPerMint=1

# The initial nonce used for minting.
# Set to 0 to start with a random nonce.
apl.mint.initialNonce=0

# Number of concurrency threads used for minting.
# Set to 0 allocate one thread per processor core.
apl.mint.threadPoolSize=0

# When set to false mint transactions are not submitted when a hash is solved.
# Set this value to true to perform actual minting.
apl.mint.isSubmitted=false

# When set to false the mint worker will resume operation even in case a mint
# transaction has returned an error response.
apl.mint.stopOnError=false



#### Passphrase Recovery Utility ####

# Specify the approximate passphrase that you remember
# recoveryWildcard=hope peac* happen *ouch easy pretend worthless talk them indeed wheel state

# Specify the positions inside the passphrase in which you like to try various options
# The first character position is 1
# recoveryPositions=10,19

# Specify the possible values to use for replacing the unknown positions, unicode characters
# can be specified using the \u notation
# recoveryDictionary=t\u2019ne



#### Shuffling ####

# Delete finished shufflings and their participants. When enabled, records of
# completed shufflings and their participants are deleted after the shuffling
# has finished, which will improve performance by keeping their tables smaller.
apl.deleteFinishedShufflings=false

# Use strong secure random implementation. As this can block on unix systems,
# it is disabled by default. Enable only if using haveged or other entropy
# source that makes reading from /dev/random fast, otherwise server-side
# encryption will be unusably slow and cause coin shufflings to fail.
apl.useStrongSecureRandom=false

# Maximum number of shufflers allowed to run at the same time on this node.
apl.maxNumberOfShufflers=100



#### JETTY ####

# Settings for the Jetty Denial Of Service Filter, used for the peer networking
# server only.
apl.peerServerDoSFilter.maxRequestsPerSec=30
apl.peerServerDoSFilter.delayMs=1000
apl.peerServerDoSFilter.maxRequestMs=300000

# keystore file and password, required if uiSSL or apiSSL are enabled.
apl.keyStorePath=keystore
apl.keyStorePassword=password

# keystore type defaults to JKS can be changed to PKCS12.
apl.keyStoreType=JKS

#API server thread pool configuration
apl.threadPoolMinSize=20

apl.threadPoolMaxSize=1000
#SSE thread pool configuration
apl.sseThreadPoolMinSize=100
apl.sseThreadPoolMaxSize=500



#### Developers only ####
#Deprecated. Use chains.json for config
# Maximum number of transactions per block. This is parameterized for load
# testing purposes, but for an existing blockchain should not be changed.
#apl.maxNumberOfTransactions=255;

# Maximum peer request size. Should be increased if block or transaction
# size limits are increased.
apl.maxPeerRequestSize=4194304

# Maximum peer response size. Should be increased if block or transaction
# size limits are increased.
apl.maxPeerResponseSize=4194304

# Maximum peer websocket message size. Should be increased if block or
# transaction size limits are increased.
apl.maxPeerMessageSize=15728640

# Force re-validation of blocks and transaction at start.
apl.forceValidate=false

# Force re-build of derived objects tables at start.
apl.forceScan=false

# Scale epoch time for faster forging. Only works when offline.
# apl.timeMultiplier=1

# Enable the following AddOns, which must also be on the classpath, e.g. placed
# in the addons/classes or addons/lib directory. List of class names, separated
# by semicolon.
#apl.addOns=apl.addons.Demo; apl.addons.AfterStart; apl.addons.BeforeShutdown

# Demo after start and before shutdown scripts
#apl.afterStartScript=../bin/afterStart.sh
#apl.beforeShutdownScript=../bin/beforeShutdown.sh

# ARS normally sets a customized security policy when AddOns are used.
# Set to true to use the default security manager when AddOns are used.
apl.disableSecurityPolicy=false

# Display a custom warning text on the login screen in the client UI.
#apl.customLoginWarning=

# Enable update feature for automatic installing updates to avoid forks and keep software up-to-date
apl.allowUpdates=true
